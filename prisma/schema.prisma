// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id              Int    @id @default(autoincrement())
  title           String
  slug            String @unique
  description     String @db.Text
  content         String
  metaTitle       String
  metaDescription String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([title])
  @@index([slug])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  role           String    @default("USER") // USER, ADMIN
  image          String?
  accounts       Account[]
  sessions       Session[]
  posts          Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic info
  model            String
  title            String
  slug             String @unique
  summary          String
  shortDescription String

  // Rich content
  description Json

  // Image gallery
  images String[]

  // Pricing (stored in cents/smallest currency unit)
  price      Int
  offerPrice Int?

  // Inventory
  quantity Int @default(0)

  // Related data
  specifications ProductSpec[]
  categories     CategoryOnProduct[]
  reviews        Review[]

  @@index([model])
  @@index([slug])
}

model ProductSpec {
  id    String  @id @default(uuid())
  name  String
  value String
  group String?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@index([productId])
}

model Category {
  id          String              @id @default(uuid())
  name        String
  description String?
  cover       String?
  specs       String[]
  products    CategoryOnProduct[]
}

model CategoryOnProduct {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @db.SmallInt
  comment    String?
  authorName String
  createdAt  DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId])
}

// Additional models for orders

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Order status
  status String @default("PENDING") // PENDING, PAID, SHIPPED, DELIVERED, CANCELLED

  // Customer details
  customerEmail String
  customerName  String

  // Payment details
  paymentIntentId String? @unique
  paymentStatus   String  @default("PENDING") // PENDING, COMPLETED, FAILED

  // Shipping address
  shippingAddress Address? @relation(fields: [addressId], references: [id])
  addressId       String?

  // Order items
  items OrderItem[]

  // Totals (stored in cents)
  subtotal Int
  total    Int

  // Notes
  notes String?

  @@index([customerEmail])
  @@index([paymentStatus])
  @@index([status])
}

model Address {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?

  // Related orders
  orders Order[]
}

model OrderItem {
  id String @id @default(uuid())

  // Order reference
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  // Product reference and snapshot
  productId    String
  productTitle String
  productImage String?

  // Price at time of purchase (stored in cents)
  price Int

  // Quantity
  quantity Int

  @@index([orderId])
  @@index([productId])
}
